{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","utils/auth.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","utils/reducers.js","utils/actions.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","ProductList","currentCategory","useQuery","loading","data","products","length","filter","product","category","map","key","spinner","CategoryMenu","setCategory","categoryData","categories","onClick","Home","useState","Detail","id","useParams","currentProduct","setCurrentProduct","useEffect","find","description","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","role","aria-label","LOGIN","ADD_ORDER","ADD_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","a","preventDefault","variables","mutationResponse","Auth","handleChange","target","value","onSubmit","htmlFor","placeholder","type","onChange","Signup","addUser","firstName","lastName","Nav","loggedIn","href","logout","OrderHistory","user","orders","order","parseInt","purchaseDate","toLocaleDateString","index","Success","addOrder","cart","forEach","saveOrder","setTimeout","alert","defaultState","cartOpen","reducer","state","action","newState","purchaseQuantity","createStore","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,qC,2LCQpC,SAASC,EAAWC,EAAWC,EAAQC,GAC5C,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3B,IAGIC,EAAIC,EAAIC,EAHNC,EAAUC,OAAOC,UAAUC,KAAK,YAAa,GAMnDH,EAAQI,gBAAkB,SAASC,GACjC,IAAMR,EAAKG,EAAQM,OAGnBT,EAAGU,kBAAkB,WAAY,CAACC,QAAS,QAC3CX,EAAGU,kBAAkB,aAAc,CAACC,QAAS,QAC7CX,EAAGU,kBAAkB,OAAQ,CAACC,QAAS,SAIzCR,EAAQS,QAAU,SAASJ,GACzBK,QAAQC,IAAI,uBAIdX,EAAQY,UAAY,SAASP,GAa3B,OAXAR,EAAKG,EAAQM,OAEbR,EAAKD,EAAGgB,YAAYtB,EAAW,aAE/BQ,EAAQD,EAAGgB,YAAYvB,GAGvBM,EAAGY,QAAU,SAASJ,GACpBK,QAAQC,IAAI,QAASN,IAGhBb,GACL,IAAK,MACHO,EAAMgB,IAAItB,GACVE,EAAQF,GACR,MAEF,IAAK,MACH,IAAMuB,EAAMjB,EAAMkB,SAClBD,EAAIJ,UAAY,WACdjB,EAAQqB,EAAIV,SAEd,MAEF,IAAK,SACHP,EAAMmB,OAAOzB,EAAO0B,KACpB,MAEF,QACET,QAAQC,IAAI,mBAKhBb,EAAGsB,WAAa,WACdvB,EAAGwB,aCtCIC,MA3Bf,SAAqBC,GAAO,IAExBC,EAKED,EALFC,MACAC,EAIEF,EAJFE,KACAN,EAGEI,EAHFJ,IACAO,EAEEH,EAFFG,MACAC,EACEJ,EADFI,SAGF,OACE,yBAAKC,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAE,oBAAeV,IACrB,yBACEW,IAAKL,EACLM,IAAG,kBAAaP,KAElB,2BAAIC,IAEN,6BACE,6BAAME,EAAN,IDvBD,SAAmBF,EAAMO,GAC9B,OAAc,IAAVA,EACKP,EAEFA,EAAO,ICmBSQ,CAAU,OAAQN,GAAnC,aACA,kCAAQD,IAEV,iD,wlCCxBC,IAAMQ,EAAiBC,IAAH,KA+BdC,GAfqBD,IAAH,KAeCA,IAAH,MAShBE,EAAaF,IAAH,K,GAsBOA,IAAH,K,gBCnBZG,MAtCf,YAA2C,IAApBC,EAAmB,EAAnBA,gBAAmB,EACdC,YAASN,GAA3BO,EADgC,EAChCA,QAASC,EADuB,EACvBA,KAEXC,GAAe,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAMC,WAAY,GAUnC,OACE,yBAAKf,UAAU,QACb,6CACCe,EAASC,OACR,yBAAKhB,UAAU,aAXdW,EAIEI,EAASE,QAAO,SAAAC,GAAO,OAAIA,EAAQC,SAAS5B,MAAQoB,KAHlDI,GAWiBK,KAAI,SAAAF,GAAO,OACzB,kBAAC,EAAD,CACEG,IAAMH,EAAQ3B,IACdA,IAAK2B,EAAQ3B,IACbK,MAAOsB,EAAQtB,MACfC,KAAMqB,EAAQrB,KACdC,MAAOoB,EAAQpB,MACfC,SAAUmB,EAAQnB,eAK5B,mEAEAc,EACF,yBAAKV,IAAKmB,IAASpB,IAAI,YAAc,OCf5BqB,MArBf,YAAwC,IAAhBC,EAAe,EAAfA,YACRC,EAAiBb,YAASJ,GAAhCM,KACFY,GAAyB,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAcC,aAAc,GAE/C,OACE,6BACE,kDACCA,EAAWN,KAAI,SAAAzB,GAAI,OAClB,4BACE0B,IAAK1B,EAAKJ,IACVoC,QAAS,WACPH,EAAY7B,EAAKJ,OAGlBI,EAAKE,WCHD+B,EAXF,WAAO,IAAD,EACsBC,mBAAS,IAD/B,mBACVlB,EADU,KACOa,EADP,KAGjB,OACE,yBAAKxB,UAAU,aACb,kBAAC,EAAD,CAAcwB,YAAaA,IAC3B,kBAAC,EAAD,CAAab,gBAAiBA,MCmDrBmB,MAtDf,WAAmB,IACTC,EAAOC,cAAPD,GADQ,EAG4BF,mBAAS,IAHrC,mBAGTI,EAHS,KAGOC,EAHP,OAKUtB,YAASN,GAA3BO,EALQ,EAKRA,QAASC,EALD,EAKCA,KAEXC,GAAe,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAMC,WAAY,GAQnC,OANAoB,qBAAU,WACJpB,EAASC,QACXkB,EAAkBnB,EAASqB,MAAK,SAAAlB,GAAO,OAAIA,EAAQ3B,MAAQwC,QAE5D,CAAChB,EAAUgB,IAGZ,oCACGE,EACC,yBAAKjC,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,2BAIA,4BAAKgC,EAAepC,MAEpB,2BACGoC,EAAeI,aAGlB,2BACE,0CADF,IAEIJ,EAAenC,MAChB,IACD,+CAGA,qDAKF,yBACEK,IAAG,kBAAa8B,EAAerC,OAC/BM,IAAK+B,EAAepC,QAGtB,KAEFgB,EAAU,yBAAKV,IAAKmB,IAASpB,IAAI,YAAe,OC3CzCoC,MAVf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OACE,yBACEC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,OAAQC,WAAY,IAAKC,UAAW,WAEhEL,ICWQM,EAfC,WACd,OACE,6BACE,kBAAC,EAAD,KACE,kDACA,4BACE,0BAAMC,KAAK,MAAMC,aAAW,gCAA5B,oB,g6BCPH,IAAMC,EAAQzC,IAAH,KAYL0C,EAAY1C,IAAH,KAmBT2C,EAAW3C,IAAH,K,iCCWN,M,qGAxCX,OAAO4C,IAAOC,KAAKC,c,iCAKnB,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,K,qCAG1BA,GACb,IAEE,OADgBH,IAAOG,GACXE,IAAMC,KAAKC,MAAQ,IAG/B,MAAOC,GACP,OAAO,K,iCAMT,OAAOC,aAAaC,QAAQ,c,4BAGxBC,GAEJF,aAAaG,QAAQ,WAAYD,GAEjCzF,OAAO2F,SAASC,OAAO,O,+BAKvBL,aAAaM,WAAW,YAExB7F,OAAO2F,SAASC,OAAO,S,MCiCZE,MAnEf,SAAeC,GAAQ,IAAD,EACcvC,mBAAS,CAAEwC,MAAO,GAAIC,SAAU,KAD9C,mBACbC,EADa,KACFC,EADE,OAEOC,YAAYzB,GAFnB,mBAEb0B,EAFa,KAEJC,EAFI,KAEJA,MAEVC,EAAgB,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,6DACvBD,EAAME,iBADiB,kBAGUL,EAAM,CAAEM,UAAW,CAAEX,MAAOE,EAAUF,MAAOC,SAAUC,EAAUD,YAH3E,OAGfW,EAHe,OAIf3B,EAAQ2B,EAAiBnE,KAAK4D,MAAMpB,MAC1C4B,EAAKR,MAAMpB,GALU,gDAOrBxE,QAAQC,IAAR,MAPqB,yDAAH,sDAWhBoG,EAAe,SAAAN,GAAU,IAAD,EACJA,EAAMO,OAAtBvF,EADoB,EACpBA,KAAMwF,EADc,EACdA,MACdb,EAAa,2BACRD,GADO,kBAET1E,EAAOwF,MAIZ,OACE,yBAAKrF,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,WAAT,uBAIA,qCACA,0BAAMqF,SAAUV,GACd,yBAAK5E,UAAU,+BACb,2BAAOuF,QAAQ,SAAf,kBACA,2BACEC,YAAY,qBACZ3F,KAAK,QACL4F,KAAK,QACL1D,GAAG,QACH2D,SAAUP,KAGd,yBAAKnF,UAAU,+BACb,2BAAOuF,QAAQ,OAAf,aACA,2BACEC,YAAY,SACZ3F,KAAK,WACL4F,KAAK,WACL1D,GAAG,MACH2D,SAAUP,KAIZR,EAAQ,6BACN,uBAAG3E,UAAU,cAAb,2CACO,KAEX,yBAAKA,UAAU,qBACb,4BAAQyF,KAAK,UAAb,cC0BKE,MAnFf,SAAgBvB,GAAQ,IAAD,EACavC,mBAAS,CAAEwC,MAAO,GAAIC,SAAU,KAD7C,mBACdC,EADc,KACHC,EADG,OAEHC,YAAYvB,GAAvB0C,EAFc,oBAIfhB,EAAgB,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,6DACvBD,EAAME,iBADiB,SAEQa,EAAQ,CACrCZ,UAAW,CACTX,MAAOE,EAAUF,MAAOC,SAAUC,EAAUD,SAC5CuB,UAAWtB,EAAUsB,UAAWC,SAAUvB,EAAUuB,YALjC,OAEjBb,EAFiB,OAQjB3B,EAAQ2B,EAAiBnE,KAAK8E,QAAQtC,MAC5C4B,EAAKR,MAAMpB,GATY,2CAAH,sDAYhB6B,EAAe,SAAAN,GAAU,IAAD,EACJA,EAAMO,OAAtBvF,EADoB,EACpBA,KAAMwF,EADc,EACdA,MACdb,EAAa,2BACRD,GADO,kBAET1E,EAAOwF,MAIZ,OACE,yBAAKrF,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,UAAT,sBAIA,sCACA,0BAAMqF,SAAUV,GACd,yBAAK5E,UAAU,+BACb,2BAAOuF,QAAQ,aAAf,eACA,2BACEC,YAAY,QACZ3F,KAAK,YACL4F,KAAK,YACL1D,GAAG,YACH2D,SAAUP,KAGd,yBAAKnF,UAAU,+BACb,2BAAOuF,QAAQ,YAAf,cACA,2BACEC,YAAY,OACZ3F,KAAK,WACL4F,KAAK,WACL1D,GAAG,WACH2D,SAAUP,KAGd,yBAAKnF,UAAU,+BACb,2BAAOuF,QAAQ,SAAf,UACA,2BACEC,YAAY,qBACZ3F,KAAK,QACL4F,KAAK,QACL1D,GAAG,QACH2D,SAAUP,KAGd,yBAAKnF,UAAU,+BACb,2BAAOuF,QAAQ,OAAf,aACA,2BACEC,YAAY,SACZ3F,KAAK,WACL4F,KAAK,WACL1D,GAAG,MACH2D,SAAUP,KAGd,yBAAKnF,UAAU,qBACb,4BAAQyF,KAAK,UAAb,cCtBKM,MArDf,WAqCE,OACE,4BAAQ/F,UAAU,iBAChB,4BACE,kBAAC,IAAD,CAAMC,GAAG,KACP,0BAAM6C,KAAK,MAAMC,aAAW,gBAA5B,sBADF,eAMF,6BA3CEmC,EAAKc,WAEL,wBAAIhG,UAAU,YACZ,wBAAIA,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,iBAAT,kBAIF,wBAAID,UAAU,QAEZ,uBAAGiG,KAAK,IAAItE,QAAS,kBAAMuD,EAAKgB,WAAhC,YAQJ,wBAAIlG,UAAU,YACZ,wBAAIA,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,WAAT,WAIF,wBAAID,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,UAAT,cCsBGkG,MAhDf,WAAyB,IAEnBC,EADItF,EAASF,YAASH,GAAlBK,KAOR,OAJIA,IACFsF,EAAOtF,EAAKsF,MAIZ,oCACE,yBAAKpG,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,2BAICmG,EACC,oCACE,iDAAuBA,EAAKP,UAA5B,IAAwCO,EAAKN,UAC5CM,EAAKC,OAAOjF,KAAI,SAACkF,GAAD,OACf,yBAAKjF,IAAKiF,EAAM/G,IAAKS,UAAU,QAC7B,4BAAK,IAAIyD,KAAK8C,SAASD,EAAME,eAAeC,sBAC5C,yBAAKzG,UAAU,YACZsG,EAAMvF,SAASK,KAAI,WAA8BsF,GAA9B,IAAGnH,EAAH,EAAGA,IAAKK,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,MAArB,OAClB,yBAAKuB,IAAKqF,EAAO1G,UAAU,kBACzB,kBAAC,IAAD,CAAMC,GAAE,oBAAeV,IACrB,yBACEW,IAAKL,EACLM,IAAG,kBAAaP,KAElB,2BAAIC,IAEN,6BACE,kCAAQC,cAQpB,QCOG6G,OA7Cf,WAAoB,IAAD,EAEIlC,YAAYxB,GAAxB2D,EAFQ,oBA8Bf,OA1BAzE,qBAAU,WAAM,4CAChB,kCAAA2C,EAAA,sEAEuBpH,EAAW,OAAQ,OAF1C,UAEUmJ,EAFV,SAGU9F,EAAW8F,EAAKzF,KAAI,SAAAzB,GAAI,OAAIA,EAAKJ,QAE1ByB,OALjB,iCAM+B4F,EAAS,CAAE5B,UAAW,CAAEjE,cANvD,gBAMgBD,EANhB,EAMgBA,KACYA,EAAK8F,SAAS7F,SAEtB+F,SAAQ,SAACnH,GACnBjC,EAAW,OAAQ,SAAUiC,MAVvC,6CADgB,uBAAC,WAAD,wBAiBhBoH,KAGG,CAACH,IAEJI,YAAW,WAAYC,MAAM,MAAQ,KACrC5I,OAAO2F,SAASC,OAAO,KAIrB,6BACE,kBAAC,EAAD,KACE,wCACA,4DAGA,6E,2BChCJiD,GAAe,CACjBnG,SAAU,GACV8F,KAAM,GACNM,UAAU,EACVzF,WAAY,GACZf,gBAAiB,IAuFNyG,GAlFC,WAAiC,IAAhCC,EAA+B,uDAAzBH,GAAcI,EAAW,uCAC5C,OAAQA,EAAO7B,MAEX,IC1BuB,kBD2BnB,OAAO,2BACA4B,GADP,IAEItG,SAAS,aAAKuG,EAAOvG,YAI7B,IChCyB,oBDiCrB,OAAO,2BACAsG,GADP,IAEI3F,WAAW,aAAK4F,EAAO5F,cAG/B,ICrC+B,0BDsC3B,OAAO,2BACA2F,GADP,IAEI1G,gBAAiB2G,EAAO3G,kBAGhC,ICzCmB,cD0Cf,OAAO,2BACA0G,GADP,IAEIF,UAAU,EACVN,KAAK,GAAD,oBAAMQ,EAAMR,MAAZ,CAAkBS,EAAOpG,YAGrC,IC/C4B,uBDgDxB,OAAO,2BACAmG,GADP,IAEIR,KAAK,GAAD,oBAAMQ,EAAMR,MAAZ,aAAqBS,EAAOvG,aAGxC,ICpDwB,mBDqDpB,IAAIwG,EAAWF,EAAMR,KAAK5F,QAAO,SAAAC,GAC7B,OAAOA,EAAQ3B,MAAQ+H,EAAO/H,OAGlC,OAAO,2BACA8H,GADP,IAEIF,SAAUI,EAASvG,OAAS,EAC5B6F,KAAMU,IAGd,IC9D4B,uBD+DxB,OAAO,2BACAF,GADP,IAEIF,UAAU,EACVN,KAAMQ,EAAMR,KAAKzF,KAAI,SAAAF,GAKjB,OAJGoG,EAAO/H,MAAQ2B,EAAQ3B,MACtB2B,EAAQsG,iBAAmBF,EAAOE,kBAG/BtG,OAInB,IC1EkB,aD2Ed,OAAO,2BACAmG,GADP,IAEIF,UAAU,EACVN,KAAM,KAId,ICjFmB,cDkFf,OAAO,2BACAQ,GADP,IAEIF,UAAWE,EAAMF,WAMzB,QACI,OAAOE,IEhGJlJ,GADDsJ,aAAYL,ICapBM,GAAS,IAAIC,IAAa,CAC9BvJ,QAAS,SAACwJ,GACR,IAAMtE,EAAQM,aAAaC,QAAQ,YACnC+D,EAAUC,WAAW,CACnBC,QAAS,CACPC,cAAezE,EAAK,iBAAaA,GAAU,OAIjD0E,IAAK,aA+BQC,OA1Bf,WACE,OACE,kBAAC,IAAD,CAAgBP,OAAQA,IACtB,kBAAC,IAAD,KACE,6BACE,kBAAC,KAAD,CAAUvJ,MAAOA,IACjB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+J,OAAK,EAACC,KAAK,IAAIC,UAAWxG,IACjC,kBAAC,IAAD,CAAOsG,OAAK,EAACC,KAAK,SAASC,UAAWjE,IACtC,kBAAC,IAAD,CAAO+D,OAAK,EAACC,KAAK,UAAUC,UAAWzC,IACvC,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,gBAAgBC,UAAWjC,IAC7C,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,gBAAgBC,UAAWtG,IAC7C,kBAAC,IAAD,CAAOoG,OAAK,EAACC,KAAK,WAAWC,UAAWzB,KACxC,kBAAC,IAAD,CAAOyB,UAAWvF,UChCxBwF,GAAcC,QACW,cAA7BjK,OAAO2F,SAASuE,UAEa,UAA7BlK,OAAO2F,SAASuE,UAEhBlK,OAAO2F,SAASuE,SAASC,MACvB,2DAyCJ,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7B,QACfuB,UAAUC,cAAcQ,YAI1BvK,QAAQC,IACN,iHAKE4J,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBlK,QAAQC,IAAI,sCAGR4J,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAA7E,GACL7F,QAAQ6F,MAAM,4CAA6CA,MC7FjE8E,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBlB,GACvB,GAEE,kBAAmBC,UAAW,CAI9B,GADkB,IAAIkB,IAAIC,4BAAwB1L,OAAO2F,SAASiC,MACpD+D,SAAW3L,OAAO2F,SAASgG,OAIvC,OAGF3L,OAAO4L,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,4BAAN,sBAEP1B,KAgEV,SAAiCK,EAAOC,GAEtCuB,MAAMxB,EAAO,CACXZ,QAAS,CAAE,iBAAkB,YAE5BiB,MAAK,SAAAoB,GAEJ,IAAMC,EAAcD,EAASrC,QAAQuC,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7B1K,OAAO2F,SAAS0G,eAKpBjC,GAAgBC,EAAOC,MAG1Ba,OAAM,WACL1K,QAAQC,IACN,oEAvFA4L,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCjK,QAAQC,IACN,iHAMJ0J,GAAgBC,EAAOC,OCrC/BE,K","file":"static/js/main.4d0f9465.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    //open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    //create variables to hold references to the database, transaction(tx), and object store\n    let db, tx, store;\n\n    //if version has changed(or this is the first time using the the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n\n      //create object store for each type of data and set \"primary\" key index to be the '_id' of the data\n      db.createObjectStore('products', {keyPath: '_id'});\n      db.createObjectStore('categories', {keyPath: '_id'});\n      db.createObjectStore('cart', {keyPath: '_id'});\n    };\n\n    //handle any errors with connection\n    request.onerror = function(e) {\n      console.log('There was an error');\n    }\n\n    // on database open success\n    request.onsuccess = function(e) {\n      //save a reference of the database to the 'db' variable\n      db = request.result;\n      //open a transaction do whatever we pass into 'storeName' (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      //save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      //if there are any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      }\n\n      switch(method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result)\n          };\n          break;\n\n        case 'delete': \n          store.delete(object._id);\n          break;\n\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      //when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      }\n\n    }\n\n  })\n\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import gql from 'graphql-tag';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n{\n  categories {\n    _id\n    name\n  }\n}\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    firstName\n    lastName\n    orders {\n      _id\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        image\n      }\n    }\n  }\n}\n`;\n\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import React from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\"\n\nfunction ProductList({ currentCategory }) {\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const products = data?.products || [];\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return products;\n    }\n\n    return products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\n\nfunction CategoryMenu({ setCategory }) {\n  const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n  const categories = categoryData?.categories || [];\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            setCategory(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React, { useState } from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\n\nconst Home = () => {\n  const [currentCategory, setCategory] = useState(\"\");\n\n  return (\n    <div className=\"container\">\n      <CategoryMenu setCategory={setCategory} />\n      <ProductList currentCategory={currentCategory} />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif'\n\nfunction Detail() {\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const products = data?.products || [];\n\n  useEffect(() => {\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    }\n  }, [products, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button>\n              Add to Cart\n            </button>\n            <button>\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n    </>\n  );\n};\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      } \n      }\n    }\n  }\n`;\n\n\nexport const ADD_USER = gql`\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../utils/queries\";\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Products\n          </Link>\n\n        {user ? (\n          <>\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img\n                          alt={name}\n                          src={`/images/${image}`}\n                        />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default OrderHistory;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\n\n\nfunction Success() {\n\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n    async function saveOrder() {\n\n        const cart = await idbPromise('cart', 'get');\n        const products = cart.map(item => item._id);\n\n        if (products.length) {\n            const { data } = await addOrder({ variables: { products } });\n            const productData = data.addOrder.products;\n          \n            productData.forEach((item) => {\n              idbPromise('cart', 'delete', item);\n            });\n          }\n\n    }\n\n    saveOrder();\n\n\n    }, [addOrder]);\n\n    setTimeout(function(){ alert(\"\"); }, 3000);\n    window.location.assign('/')\n\n\n    return (\n      <div>\n        <Jumbotron>\n          <h1>Success!</h1>\n          <h2>\n            Thank you for your purchase!\n          </h2>\n          <h2>\n            You will now be redirected to the homepage\n          </h2>\n        </Jumbotron>\n      </div>\n    );\n  };\n\nexport default Success;","import {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n  } from './actions';\n\n\nconst defaultState = {\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: '',\n}\n\n\n\nconst reducer = (state=defaultState, action) => {\n    switch (action.type) {\n        //if action type value is the value of 'UPDATE_PRODUCTS', return a new state object with an updated products array \n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products]\n            };\n\n            //if action type value is value of 'UPDATE_CATEGORIES', return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n        \n        case UPDATE_CURRENT_CATEGORY: \n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n\n        case ADD_TO_CART: \n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            };\n\n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.products]\n            };\n\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n            });\n            \n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };\n\n        case UPDATE_CART_QUANTITY: \n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                    if(action._id === product._id) {\n                        product.purchaseQuantity = action.purchaseQuantity;\n                    }\n\n                    return product;\n                })\n            };\n\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n\n\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            }\n\n        \n\n            //if it's none of these actions, do not update the state at all and keep things the same\n        default:\n            return state;\n    }\n}\n\n\nexport default reducer;\n\n\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n\n","import { createStore } from 'redux';\nimport reducer from '../utils/reducers'\n\nconst store = createStore(reducer);\nexport default store;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport OrderHistory from \"./pages/OrderHistory\";\nimport Success from './pages/Success'\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route exact path=\"/orderHistory\" component={OrderHistory} />\n            <Route exact path=\"/products/:id\" component={Detail} />\n            <Route exact path=\"/success\" component={Success} />\n            <Route component={NoMatch} />\n          </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n\n  );\n}\n\n\n//redux change\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}